TITLE:: BusManager
summary:: A manager for buses, makes it possible to refer to buses via names rather than indices. It also makes it easier to split up code into multiple files via the requires feature.
categories:: Tools

DESCRIPTION::
A manager for buses, makes it possible to refer to buses via names rather than indices. It also makes it easier to split up code into multiple files via the requires feature. The actual allocation of buses is delayed until all separate units can note what arguments they are interested in.

In general you split usage into 4 stages:
 - Require stage - all units say what buses they are interested in (by names)
 - Allocation stage - all required buses are allocated
 - Acquire stage - all units can acquire buses via their names
 - Free stage - all buses are freed

CLASSMETHODS::

METHOD:: new

ARGUMENT:: server
The server where the buses should be allocated.

returns:: A new BusManager instance.


INSTANCEMETHODS::

METHOD:: control
Acquire an allocated control rate bus with the given name. This function is related to link::#-requireControl::.

ARGUMENT:: name
The name of a previously required control rate bus (see link::#-requireControl::).
NOTE:: An exception is thrown if a bus with this name has not been allocated. ::

returns:: An instance of Bus.

METHOD:: requireAudio
Requires an audio rate bus to be allocated, with at least minChannels channels.
WARNING:: This function must be called BEFORE link::#-allocate::! ::

ARGUMENT:: name
The logical name of this bus.

ARGUMENT:: minChannels
The number of channels that will be used. This value may differ between different units requiring the same bus.

returns:: this

METHOD:: allocate
Allocates all required control and audio rate buses.

returns:: this

METHOD:: init
See link::#*new::.

METHOD:: audio
Acquire an allocated audio rate bus with the given name. This function is related to link::#-requireAudio::.

ARGUMENT:: name
The name of a previously required audio rate bus (see link::#-requireAudio::).
NOTE:: An exception is thrown if a Bus with this name has not been allocated. ::

returns:: An instance of Bus.

METHOD:: free
Frees all allocated buses, and clears all required buses.

returns:: this

METHOD:: requireControl
Requires an control rate bus to be allocated, with at least minChannels channels.
WARNING:: This function must be called BEFORE link::#-allocate::! ::

ARGUMENT:: name
The logical name of this bus.

ARGUMENT:: minChannels
The number of channels that will be used. This value may differ between different units requiring the same bus.

returns:: this

METHOD:: debug
Prints out all allocated buses after link::#-allocate:: has been called, or the maximum required # of channels of each bus.

returns:: this


EXAMPLES::
Note that a simple example as the one below makes the BusManager completely useless, it is inteded for larger projects with a lot of Synths split into multiple different files/classes.
code::
(
s.waitForBoot{
	var bm = BusManager(s);
	bm.requireControl(\Sins, 2);
	bm.requireAudio(\Sins, 2);
	bm.requireAudio(\Saws, 2);

	bm.allocate;

	fork {
		var synth = {
			Out.kr(bm.control(\Sins), [ SinOsc.kr(50), SinOsc.kr(100) ]);
			Out.ar(bm.audio(\Sins), [ SinOsc.ar(440), SinOsc.ar(880) ]);
			Out.ar(bm.audio(\Saws), [ Saw.ar(440), Saw.ar(880) ]);

			// Play the sins on stereo speakers
			Out.ar(s.outputBus, In.ar( bm.audio(\Sins), 2 ) );
 		}.play;

		15.yield;
		synth.free;
		bm.free;
	};
};
)
::