TITLE:: BufferRequest
summary:: A representation of a buffer request.
categories:: Tools>BufferRequester
related:: Classes/BufferRequester, Classes/BufferRequesterGetn, Classes/BufferRequesterLoadToFloatArray, Classes/BufferRequesterMultiLoadToFloatArray

DESCRIPTION::
A representation of a buffer request used by the 3 implementations of the BufferRequester.

CLASSMETHODS::

METHOD:: new
Creates a new BufferRequest.

ARGUMENT:: idx
The starting index to read from.

NOTE::
This is not an index to a frame, it is an index into the buffer. This means idx can be anywhere in the range [0, buffer.numChannels * buffer.numFrames).
::

ARGUMENT:: cnt
The number of floats to read starting at index.

returns:: The BufferRequest.

METHOD:: now
returns:: A timestamp that is used internally.

INSTANCEMETHODS::

METHOD:: timestamp
returns:: The current timestamp. See link::#-duration::.

METHOD:: data
returns:: The read data, or nil if the data has not been read yet. See link::Classes/BufferRequester#-sendAll#BufferRequesters sendAll::.

METHOD:: init
Initializes the index and count members, aswell as resetting data and timestamp to nil.

ARGUMENT:: idx
See link::#*new::.

ARGUMENT:: cnt
See link::#*new::.

returns:: this

METHOD:: index
returns:: The index where the read should start.

METHOD:: count
returns:: How many floats that should be read from the buffer.

METHOD:: updateTimestamp
Updates the timestamp to link::#*now::.

returns:: this

METHOD:: duration
returns:: (link::#*now:: - timestamp).

EXAMPLES::

code::
(
fork {
	var buffer = Buffer.alloc(Server.default, 5000, 2);
	var br = BufferRequester(buffer);
	var reqs = br.asRequests(8000, 1000);
	br.sendAll(reqs);

	br.lostDuration.yield;

	reqs do: { | req |
		// NOTE: It is not guaranteed that the requests succeeded! nil data means it failed.
		format("% % % %", req.index, req.count, req.duration, req.data).postln;
	};
};
)
::