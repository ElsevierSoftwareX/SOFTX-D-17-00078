TITLE:: MovingEGG
summary:: Generates information presented by DrawableMovingEGG.
categories:: Tools>UGens
related:: Classes/DrawableMovingEGG

DESCRIPTION::
Fills a link::Classes/Buffer:: with the information required by the link::Classes/DrawableMovingEGG:: instance for the presentation. The numCycles most recent cycles are stored in the link::Classes/Buffer:: for presentation, using numSamples samples to represent each cycle.

CLASSMETHODS::

METHOD:: allocBuffer
Allocates the link::Classes/Buffer:: required by link::#*ar::.

ARGUMENT:: server
The server where the link::Classes/Buffer:: should be allocated.

ARGUMENT:: numCycles
The number of consecutive cycles to store.

ARGUMENT:: numSamples
The number of samples used to represent each cycle.

NOTE::The actual cycles are resampled, since they most likely won't match numSamples.::

returns:: a link::Classes/Buffer:: that can be used in link::#*ar::.

METHOD:: ar
ARGUMENT:: bufnum
The link::Classes/Buffer:: allocated with link::#*allocBuffer::.

ARGUMENT:: in
The input signal.

ARGUMENT:: gate
The gate indicating when new cycles begin and old cycles end.

ARGUMENT:: count
The number of consecutive cycles to be stored.

ARGUMENT:: minSamples
The minimum number of samples of a valid cycle.

ARGUMENT:: maxSamples
The maximum number of samples of a valid cycle.

NOTE::maxSamples is required for internal buffers to record the entire cycle before the resample step. Also too many or few samples indicates erronous cycle separation.::

ARGUMENT:: normalize
True (1) or False (0), indicating whether the input signal should be normalized.

INSTANCEMETHODS::


EXAMPLES::

code::
(
Server.default.waitForBoot{
    var buffer = MovingEGG.allocBuffer(Server.default, 20, 80);
    var clock = TempoClock(24);
    var bufsize = buffer.numFrames * buffer.numChannels;
    var msg = buffer.getnMsg(0, bufsize);
    var w = Window();
    var uv = UserView(w.view, w.view.bounds).resize_(5).background_(Color.white);
    var dmegg = DrawableMovingEGG(20, 80, true);

    var synth = {
        var in = SinOsc.ar(20);
        var noise = WhiteNoise.ar(0.05);
        var gate = Trig1.ar(in, 0);
        MovingEGG.ar(buffer, in + noise, gate, 20, 100, 4410, 1);
    }.play;

    var oscf = OSCFunc({ | msg |
        var data = msg.copyToEnd(4);
        dmegg.data = data.copy;
    }, '/b_setn', Server.default.addr, nil);

    clock.sched(1, {
        Server.default.listSendMsg(msg);
        { uv.refresh; }.defer;
        1
    });

    uv.drawFunc_{
        dmegg.draw(uv);
    };

    w.front;
};
)
::