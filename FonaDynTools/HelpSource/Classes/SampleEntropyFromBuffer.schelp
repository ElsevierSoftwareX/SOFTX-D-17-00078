class:: SampleEntropyFromBuffer
summary:: Computes the sample entropy on the values stored in a buffer.
categories:: UGens>Generators>Deterministic
related:: Classes/SampleEntropyFromBus

Description::
Computes the sample entropy of the values stored in a buffer. See link::http://ajpheart.physiology.org/content/278/6/H2039.long:: for a description of how the sample entropy is computed.

classmethods::

method::ar
method::kr

argument::bufnum
The input buffer. This buffer should only have one channel.

argument::sequence_length
The sequence length for sample entropy calculations. This argument can be either control or audio rate.

note:: sequence_length must be less than the number of frames in the buffer! ::

argument::tolerance
The tolerance to accept matches among sequences. If the chebychev distance between two sequences of length sequence_length is less than tolerance, it is accepted and otherwise rejected. This argument can be either control or audio rate.

argument::phase
The start position in the buffer for the sample entropy calculation. This argument can be either control or audio rate.

argument::length
The length of the input to the sample entropy calculations. A length of -1 is equal to the rest of the buffer. This argument can be either control or audio rate.

method::upperBounds

argument::buffer
The buffer that was given to link::#*ar:: or link::#*kr::.

argument::sequence_length
The sequence_length that was given to link::#*ar:: or link::#*kr::.

returns::An estimation of the largest possible sample entropy measurement that you can get. This estimation works fairly well for link::Classes/Buffer#-numFrames:: < 10, and increasingly poorly with larger sizes.

Examples::

code::
(
s.waitForBoot{
	var zeros, ones, a;
	ones = FloatArray.fill(30, { 1 });
	zeros = FloatArray.fill(50, { 0 });
	a = zeros ++ ones ++ zeros ++ ones ++ zeros;
	Buffer.loadCollection(s, a, 1, {
		| buf |
		// You should hear a sound every few seconds, as the sample entropy calculations pass from zero's to ones in the buffer.
		{
			{
				SinOsc.ar( 440 *
					SampleEntropyFromBuffer.kr(buf, 3, 0.5,
						Phasor.kr(0, 0.02, 0, a.size - 10),
					10)
				);
			}.scope
		}.defer;
	});
};
)
::
