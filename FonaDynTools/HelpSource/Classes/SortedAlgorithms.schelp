TITLE:: SortedAlgorithms
summary:: A collection of algorithms for sorted ranges used in the FonaDyn project.
categories:: Tools>Algorithms
related:: Classes/SequenceableCollection

DESCRIPTION::
A collection of algorithms for sorted ranges in link::Classes/SequenceableCollection::s used in the FonaDyn project. All of the algorithms rely on binary search for efficiency.

CLASSMETHODS::

METHOD:: initClass
Initializes the Functors.

METHOD:: lower_bound
This function behaves equally to that of the lower_bound algorithm in the C++ standard library.

ARGUMENT:: seq
A link::Classes/SequenceableCollection:: instance.

ARGUMENT:: elem
The element searched for.

ARGUMENT:: firstIdx
The start index for the search (or nil for the start of the link::Classes/SequenceableCollection::).

ARGUMENT:: lastIdx
The one past the end index for the search (or nil for the end of the link::Classes/SequenceableCollection::).

ARGUMENT:: pred
A predicate for the comparisons, or nil for less than.

WARNING::This MUST be a strict comparison, in other words pred(a, a) == false.::

returns::  The furthermost position i in the range [first,last) such that for every position j in the range [first,i) the following corresponding conditions hold: pred(seq(j), elem) != false.

NOTE::
Time Complexity: O(log n), where n = lastIdx - firstIdx.
::

METHOD:: functor_greater
returns:: the predicate for greater than (>).

METHOD:: upper_bound
This function behaves equally to that of the upper_bound algorithm in the C++ standard library.

ARGUMENT:: seq
A link::Classes/SequenceableCollection:: instance.

ARGUMENT:: elem
The element searched for.

ARGUMENT:: firstIdx
The start index for the search (or nil for the start of the link::Classes/SequenceableCollection::).

ARGUMENT:: lastIdx
The one past the end index for the search (or nil for the end of the link::Classes/SequenceableCollection::).

ARGUMENT:: pred
A predicate for the comparisons, or nil for less than.

WARNING::This MUST be a strict comparison, in other words pred(a, a) == false.::

returns:: The furthermost position i in the range [firstIdx,lastIdx) such that for every position j in the range [first,i) the following corresponding conditions hold: pred(elem, seq[j]) == false.

NOTE::
Time Complexity: O(log n), where n = lastIdx - firstIdx.
::

METHOD:: functor_less
returns:: the predicate for less than (<).

METHOD:: equal_bound
This function behaves equally to that of the equal_bound algorithm in the C++ standard library.

ARGUMENT:: seq
A link::Classes/SequenceableCollection:: instance.

ARGUMENT:: elem
The element searched for.

ARGUMENT:: firstIdx
The start index for the search (or nil for the start of the link::Classes/SequenceableCollection::).

ARGUMENT:: lastIdx
The one past the end index for the search (or nil for the end of the link::Classes/SequenceableCollection::).

ARGUMENT:: pred
A predicate for the comparisons, or nil for less than.

WARNING::This MUST be a strict comparison, in other words pred(a, a) == false.::

returns:: [ SortedAlgorithms.lower_bound(seq, elem, firstIdx, lastIdx, pred), SortedAlgorithms.upper_bound(seq, elem, firstIdx, lastIdx, pred) ]

NOTE::
Time Complexity: O(log n), where n = lastIdx - firstIdx.
::

INSTANCEMETHODS::


EXAMPLES::

subsection::Simple example
code::
(
var arr = [1, 2, 3, 3, 3, 4, 5, 6];
var range;
var indices;

// Print the range and indices
arr do: { | x | format("% ", x).post; }; "".postln;
arr do: { | x, idx | format("% ", idx).post; }; "".postln;
// 1 2 3 3 3 4 5 6
// 0 1 2 3 4 5 6 7

// Find the upper and lower bound for 3 in arr.
SortedAlgorithms.lower_bound(arr, 3).postln; // 2
SortedAlgorithms.upper_bound(arr, 3).postln; // 5

// Get the same as above but as a range
range = SortedAlgorithms.equal_bound(arr, 3); // [2, 5]

// Convert the range to a series of indices for all 3's
indices = Array.series(range[1] - range[0], range[0]); // [2, 3, 4]

// Print the 3's from arr
arr[ indices ].postln; // [3, 3, 3]
)
::

subsection::Example with predicates
code::
(
var arr1 = [1, 2, 3, 3, 3, 4, 5];
var arr2 = arr1.reverse;
var arr3 = ["q", "ab", "cd", "ef", "gh", "pqrs", "pqrst"]; // Sorted by length
var range;
var indices;

// Locate all 3's in arr2
range = SortedAlgorithms.equal_bound(arr2, 3, pred: SortedAlgorithms.functor_greater); // [2, 5]
indices = Array.series(range[1] - range[0], range[0]); // [2, 3, 4]
arr2[ indices ].postln; // [3, 3, 3]

// Locate all strings of the same size as "ab" in arr3:
range = SortedAlgorithms.equal_bound(arr3, "ab", pred: { | a, b | a.size < b.size });
range.postln; // [1, 5]
indices = Array.series(range[1] - range[0], range[0]); // [1, 2, 3, 4]
arr3[ indices ].postln; // [ ab, cd, ef, gh ]

// Locate all strings longer than "ab" in arr3:
range = SortedAlgorithms.upper_bound(arr3, "ab", pred: { | a, b | a.size < b.size });
range.postln; // 5
indices = Array.series(arr3.size - range, range); // [5, 6]
arr3[ indices ].postln; // [ pqrs, pqrst ]
)
::

subsection::Advanced Example
code::
(
var arr = ["a", "b", "c", "aa", "bb", "bb", "bc", "bd", "cd", "de", "ef", "bce", "bcd", "bce", "bklmn"];
var range1, range2;
var indices;

// Locate the range for all strings of length 2
range1 = SortedAlgorithms.equal_bound(arr, "xx", pred: { | a, b | a.size < b.size });
range1.postln; // [3, 11]

// Locate all strings starting with "b" in range1
range2 = SortedAlgorithms.equal_bound(arr, "b", range1[0], range1[1], pred: { | a, b | a[0] < b[0] });
range2.postln; // [4, 8]

// Convert range2 into indices and print the values
indices = Array.series(range2[1] - range2[0], range2[0]); // [4, 5, 6, 7]
arr[ indices ].postln; // [ bb, bb, bc, bd ]
)
::