TITLE:: BusListenerScopeHandler
summary:: A Scope handler for the BusListener class.
categories:: Tools>BusListener>Handlers
related:: Classes/BusListener

DESCRIPTION::
Manages a matrix with scope data, using a timestamp bus (the first of the given indices) to format the time-axis of the scope and remove old data. See BusListenerScopeHandler for more information. This handler works well with the link::Classes/ScopeViewer::, and can work not only with time in seconds, but any form of timestamp as long as its consistent, comparable with the < operator, and with a strictly increasing value.

The output channels in the matrix given to the handler come in the same order as the indices, hence with the timestamp first and values following. Since all channels use the same timestamp, it is only output once.

EXAMPLES::

SUBSECTION:: Simple Example
code::
(
s.waitForBoot{
	var bl = BusListener();
	var cbus = Bus.control(Server.default);
	var abus = Bus.audio(Server.default);
	var gate = Bus.audio(Server.default);
	var dur = 2;
	var scope = ScopeViewer(Window("Scope Example").background_(Color.black).front, ControlSpec(dur.neg, 0, units: 's'), ControlSpec(-1, 1));
	var clock = TempoClock(24);

	scope.view.resize_(5);

	{
		Out.kr(cbus, [Saw.kr(4)]);
		Out.ar(abus, [Timestamp.ar]);

		// Grab values ~70 times per second
		Out.ar(gate, [Trig1.ar(SinOsc.ar(70), 0)]);
	}.play;


	bl.addHandler(\ScopeSaw, \scope, [1, 0], dur, { | data |
		scope.update(data.first, [data.last]);
	});

	fork {
		bl.prepare(\global, Server.default, [cbus, abus], gate, clock);
		Server.default.sync;
		bl.start(Server.default, Server.default.defaultGroup);

		15.yield;

		bl.stop;
	};
};
)
::

SUBSECTION:: Superposed example
code::
(
s.waitForBoot{
	var bl = BusListener();
	var csaw = Bus.control(Server.default, 3);
	var asin = Bus.audio(Server.default, 3);
	var atime = Bus.audio(Server.default);
	var gate = Bus.audio(Server.default);
	var dur = 2;
	var scope = ScopeViewer(Window("Superposed Scope Example").background_(Color.black).front, ControlSpec(dur.neg, 0, units: 's'), ControlSpec(-1, 1));
	var clock = TempoClock(24);
	var tool = BusListener.newBusAssignmentTool;

	scope.view.resize_(5);

	{
		Out.kr(csaw, [Saw.kr(4), Saw.kr(2), Saw.kr(1)]);
		Out.ar(asin, [SinOsc.ar(4), SinOsc.ar(2), SinOsc.ar(1)]);
		Out.ar(atime, [Timestamp.ar]);

		// Grab values ~70 times per second
		Out.ar(gate, [Trig1.ar(SinOsc.ar(70), 0)]);
	}.play;

	tool.assign(\Scope,
		[
			atime,
			// Superposing 6 signals over eachother, so it looks quite messy.
			csaw,
			asin
		]
	);

	bl.addHandler(\ScopeSaw, \scope, tool.indices(\Scope), dur, { | data |
		scope.update(data.first, data.drop(1));
	});

	fork {
		bl.prepare(\global, Server.default, tool.buses, gate, clock);
		Server.default.sync;
		bl.start(Server.default, Server.default.defaultGroup);

		15.yield;

		bl.stop;
	};
};
)
::

SUBSECTION:: Non-superposed example
code::
(
s.waitForBoot{
	var bl = BusListener();
	var csaw = Bus.control(Server.default, 3);
	var asin = Bus.audio(Server.default, 3);
	var atime = Bus.audio(Server.default);
	var gate = Bus.audio(Server.default);
	var dur = 2;
	var wnd = Window("Superposed Scope Example").background_(Color.black);
	var scopes = 6 collect: { | i |
		ScopeViewer(wnd.view, ControlSpec(dur.neg, 0, units: 's'), ControlSpec(-1, 1))
	};

	var clock = TempoClock(24);
	var tool = BusListener.newBusAssignmentTool;

	wnd.layout = VLayout(
		*(scopes collect: { | scope | [scope.view, stretch: 1] })
	);

	wnd.front;
	{
		Out.kr(csaw, [Saw.kr(4), Saw.kr(2), Saw.kr(1)]);
		Out.ar(asin, [SinOsc.ar(4), SinOsc.ar(2), SinOsc.ar(1)]);
		Out.ar(atime, [Timestamp.ar]);

		// Grab values ~70 times per second
		Out.ar(gate, [Trig1.ar(SinOsc.ar(70), 0)]);
	}.play;

	tool.assign(\Scope,
		[
			atime,
			csaw,
			asin
		]
	);

	bl.addHandler(\ScopeSaw, \scope, tool.indices(\Scope), dur, { | data |
		scopes do: { | scope, idx |
			scope.update(data.first, [ data[1 + idx] ]);
		};
	});

	fork {
		bl.prepare(\global, Server.default, tool.buses, gate, clock);
		Server.default.sync;
		bl.start(Server.default, Server.default.defaultGroup);

		15.yield;

		bl.stop;
	};
};
)
::