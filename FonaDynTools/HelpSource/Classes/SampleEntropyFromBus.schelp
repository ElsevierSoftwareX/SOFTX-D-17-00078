class:: SampleEntropyFromBus
summary:: Computes the sample entropy on the values using a sliding window on a bus.
categories:: UGens>Generators>Deterministic
related:: Classes/SampleEntropyFromBuffer

Description::
Computes the sample entropy of the values stored in a sliding window. The sliding window is managed internally. See link::http://ajpheart.physiology.org/content/278/6/H2039.long:: for a description of how the sample entropy is computed. This version allows you to modulate sequence_length and tolerance. A faster implementation is used if the sequence_length and tolerance are scalars.

classmethods::

method::ar
method::kr

argument::in
The input signal. This signal can be either of control or audio rate.

argument::window_size
The size of the sliding window. This value can NOT be modulated.

note:: window_size must be larger than sequence_length! ::

argument::sequence_length
The sequence length for sample entropy calculations. This argument can be either control or audio rate.

argument::tolerance
The tolerance to accept matches among sequences. If the chebychev distance between two sequences of length sequence_length is less than tolerance, it is accepted and otherwise rejected. This argument can be either control or audio rate.

NOTE::If both the sequence_length and tolerance are scalars (link::Classes/SimpleNumber::, link::Classes/Float::, link::Classes/Integer:: etc), a faster implementation is used. Time complexity: O(2(n - m)m) for scalar sequence_length and tolerance, O( m(n - m)^2 ) otherwise, where n is the window_size and m is the sequence_length.
::

argument::gate
A gate controlling when data is read from strong::in::. (> 0 = open, <=0 = closed)

returns:: The sample entropy measurement for the current window. While the gate is closed the sample entropy measurement is kept stable.

method::upperBounds

argument::window_size
The window_size that was given to link::#*ar:: or link::#*kr::.

argument::sequence_length
The sequence_length that was given to link::#*ar:: or link::#*kr::.

returns::An estimation of the largest possible sample entropy measurement that you can get. This estimation works fairly well for window_size < 10, and increasingly poorly with larger window sizes.

Examples::

code::
(
s.waitForBoot{
	var bl = BusListener();
	var asaw = Bus.audio(Server.default, 1);
	var ase = Bus.audio(Server.default, 1);
	var atime = Bus.audio(Server.default);
	var gate = Bus.audio(Server.default);
	var dur = 2;
	var tool = BusListener.newBusAssignmentTool;
	var clock = TempoClock(60);

	var synth = {
		var smallsaws = Array.series(5, 20, 5) collect: Saw.ar(_, 0.2);
		var saw = Saw.ar(10) + smallsaws.sum + WhiteNoise.ar(0.05);
		Out.ar(asaw, [saw]);

		// Set the tolerance to more than twice the maximum noise difference (0.10)
		Out.ar(ase, [SampleEntropyFromBus.ar(saw, 20, 3, 0.15)]);
	}.play;

	tool.assign(\Tmp,
		[
			asaw,
			ase
		]
	);

	// Plots the saw and sample entropy
	// It should be evident that the noise is ignored,
	// and all transitions between the underlying saws are found via
	// spikes in sample entropy.
	bl.addHandler(\tmp, \plot, tool.indices(\Tmp));
	fork {
		bl.prepare(\global, Server.default, tool.buses, 1, clock);
		Server.default.sync;
		bl.start(Server.default, Server.default.defaultGroup);

		0.5.yield;

		bl.stop;
		synth.free;

	};
};
)
::
