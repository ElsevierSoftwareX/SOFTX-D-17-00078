TITLE:: VRPController
summary:: Class containing all controllers.
categories:: FonaDyn
related:: Classes/VRPMain

DESCRIPTION::
The VRPController*s manages the Synths running on the server. These synths may require buffers, buses etc. Mapping the buses into the Synths parameters, and allocating the buffers required is the job of the VRPController*s. The second job is grabbing data from the server back to the client, and vice versa.

All VRPController*s share 6 functions:

strong::init:: initializes the VRPController. The lifetime of VRPControllers is simply until the server dies. They can however utilize sync to survive for longer, if they require to do so.

strong::requires:: is called directly after construction. This function gets an instance of a link::Classes/BusManager:: and should utilize the link::Classes/BusManager#-requiresAudio:: and link::Classes/BusManager#-requiresControl:: methods to tell the BusManager which buses it is interested of.

strong::prepare:: is called directly after requires and will begin to prepare the VRPController* for it's job. In this function it should compile all the SynthDefs via the VRPSD* classes, as well as allocating any buffers required by the synths.

strong::start:: is called once the server has completed all the previous requests from prepare. In this function the Synths should be initiated. If the client requires data from the server at a regular interval, or otherwise requires to schedule tasks, it should utilize the link::Classes/TempoClock:: given as a parameter. It will serve all VRPController*s for this sole purpose.

strong::stop:: is called when the server has been paused, and the synths, buffers and any other resources should be cleaned up. If the VRPController* is not done grabbing data from the server, it can utilize the strong::sync:: function to make the client wait with freeing the shared resources (groups, buses etc). The strong::sync:: function is called directly after strong::stop::.

INSTANCEMETHODS::

METHOD:: sampen
returns:: A link::Classes/VRPControllerSampEn:: instance.

METHOD:: postp
returns:: A link::Classes/VRPControllerPostProcessing:: instance.

METHOD:: io
returns:: A link::Classes/VRPControllerIO:: instance.

METHOD:: csdft
returns:: link::Classes/VRPControllerCSDFT:: instance.

METHOD:: scope
returns:: link::Classes/VRPControllerScope:: instance.

METHOD:: cluster
returns:: link::Classes/VRPControllerCluster:: instance.

METHOD:: vrp
returns:: link::Classes/VRPControllerVRP:: instance.

METHOD:: asArray
returns:: An array with all VRPController*s.